# Github Actions CI/CD

name: Checks

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.DB_USERNAME }}" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "DB_HOSTNAME=${DB_HOSTNAME}" >> .env
        echo "DB_NAME=${DB_NAME}" >> .env
        echo "DB_USERNAME=${DB_USERNAME}" >> .env
        echo "DB_PASSWORD=${DB_PASSWORD}" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose  

    - name: Drop existing test database
      env:
        PGPASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        psql -h ${{ secrets.DB_HOSTNAME }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_NAME }} -p 5432 -c "DROP DATABASE IF EXISTS test_postgres;"
   
    - name: Create new test database
      env:
        PGPASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        psql -h ${{ secrets.DB_HOSTNAME }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_NAME }} -p 5432 -c "CREATE DATABASE test_postgres;"

    - name: Build and run Docker containers
      run: |
        docker-compose build
        docker-compose up -d

    - name: Run tests with coverage and generate report
      run: |
        docker-compose run --rm app sh -c "coverage run --data-file=/tmp/.coverage manage.py test --noinput && coverage report --data-file=/tmp/.coverage"

    - name: Tear down Docker containers
      run: docker-compose down