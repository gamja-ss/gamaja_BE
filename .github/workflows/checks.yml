# Github Actions CI/CD

name: Checks

on:
  push:
    branches-ignore:
      - main  # main 브랜치를 제외
      - develop  # develop 브랜치를 제외
      #그외의 모든 브랜치에 대해서는 CI진행
    tags:
      - 'v*.*.*'  # 'v'로 시작하는 모든 버전 태그에 대해 CD 작업 실행

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "DB_HOSTNAME=${DB_HOSTNAME}" >> .env
        echo "DB_NAME=${DB_NAME}" >> .env
        echo "DB_USERNAME=${DB_USERNAME}" >> .env
        echo "DB_PASSWORD=${DB_PASSWORD}" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose  

    - name: Build and run Docker containers
      run: |
        docker-compose build
        docker-compose up -d

    # - name: Run tests with coverage and generate report
    #   run: |
    #     docker-compose run --rm app sh -c "coverage run --data-file=/tmp/.coverage manage.py test --noinput && coverage report --data-file=/tmp/.coverage"

    - name: Tear down Docker containers
      run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')  # CD 작업이 태그로 시작되는 경우에만 실행
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t your-dockerhub-username/your-image-name:$VERSION .
          docker push your-dockerhub-username/your-image-name:$VERSION

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@your-ec2-ip-address << 'EOF'
          # Pull the latest image with the version tag
          docker pull your-dockerhub-username/your-image-name:$VERSION
          
          # Stop and remove the old container (ignore errors if it doesn't exist)
          docker stop your-container-name || true
          docker rm your-container-name || true
          
          # Start the new container with the versioned image
          docker run -d --name your-container-name -p 8000:8000 your-dockerhub-username/your-image-name:$VERSION
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}







