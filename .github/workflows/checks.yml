# Github Actions CI/CD

name: Checks

on:
  push:
    branches-ignore:
      - main  # main 브랜치를 제외
      - develop  # develop 브랜치를 제외
      #그외의 모든 브랜치에 대해서는 CI진행
    tags:
      - 'v*.*.*'  # 'v'로 시작하는 모든 버전 태그에 대해 CD 작업 실행

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
      RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      RDS_DB_PORT: ${{ secrets.RDS_DB_PORT }}


    steps:
    - uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "RDS_HOSTNAME=${RDS_HOSTNAME}" >> .env
        echo "RDS_DB_NAME=${RDS_DB_NAME}" >> .env
        echo "RDS_USERNAME=${RDS_USERNAME}" >> .env
        echo "RDS_PASSWORD=${RDS_PASSWORD}" >> .env
        echo "RDS_DB_PORT=${RDS_DB_PORT}" >> .env
        echo "SECRET_KEY=\"${{ secrets.SECRET_KEY }}\"" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and run Docker containers
      run: |
        docker-compose build
        docker-compose up -d

    # - name: Run tests with coverage and generate report
    #   run: |
    #     docker-compose run --rm app sh -c "coverage run --data-file=/tmp/.coverage manage.py test --noinput && coverage report --data-file=/tmp/.coverage"

    - name: Tear down Docker containers
      run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')  # CD 작업이 태그로 시작되는 경우에만 실행
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: hiyoon/gamja_be-app:${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: cache move
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -t -o StrictHostKeyChecking=no -i private_key ubuntu@3.36.92.37 << EOF
          
          sudo docker pull hiyoon/gamja_be-app:${{ env.VERSION }}
          sudo docker stop gamja_be-app || true
          sudo docker rm gamja_be-app || true
          sudo docker run -d --name gamja_be-app -p 8000:8000 \
                        -e RDS_HOSTNAME="${{ secrets.RDS_HOSTNAME }}" \
                        -e RDS_DB_NAME="${{ secrets.RDS_DB_NAME }}" \
                        -e RDS_USERNAME="${{ secrets.RDS_USERNAME }}" \
                        -e RDS_PASSWORD="${{ secrets.RDS_PASSWORD }}" \
                        -e RDS_DB_PORT="${{ secrets.RDS_DB_PORT }}" \
                        -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
                        hiyoon/gamja_be-app:${{ env.VERSION }}
      EOF

      - name: 정리
        if: always()
        run: rm -f private_key