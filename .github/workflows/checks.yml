# Github Actions CI/CD

name: Checks

on:
  push:
    branches-ignore:
      - main
      - develop
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
      RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      RDS_DB_PORT: ${{ secrets.RDS_DB_PORT }}

    steps:
    - uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "RDS_HOSTNAME=${RDS_HOSTNAME}" >> .env
        echo "RDS_DB_NAME=${RDS_DB_NAME}" >> .env
        echo "RDS_USERNAME=${RDS_USERNAME}" >> .env
        echo "RDS_PASSWORD=${RDS_PASSWORD}" >> .env
        echo "RDS_DB_PORT=${RDS_DB_PORT}" >> .env
        echo "SECRET_KEY=\"${{ secrets.SECRET_KEY }}\"" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and run Docker containers
      run: |
        docker-compose build
        docker-compose up -d

#    - name: Run tests with coverage and generate report
#      run: |
#       docker-compose run --rm app sh -c "coverage run --data-file=/tmp/.coverage manage.py test --noinput && coverage report --data-file=/tmp/.coverage"

    - name: Tear down Docker containers
      run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            hiyoon/gamja_be-app:${{ env.VERSION }}
            hiyoon/gamja_be-daphne:${{ env.VERSION }}
            hiyoon/gamja_be-celery:${{ env.VERSION }}
            hiyoon/gamja_be-celery-beat:${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: cache move
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Copy docker-compose.prod.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.prod.yml ubuntu@3.36.92.37:/home/ubuntu/app/docker-compose.prod.yml

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@3.36.92.37 << EOF
            cd /home/ubuntu/app
            echo "RDS_HOSTNAME=${{ secrets.RDS_HOSTNAME }}" > .env
            echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> .env
            echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
            echo "RDS_DB_PORT=${{ secrets.RDS_DB_PORT }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "GITHUB_CLIENT_ID=${{ secrets.KITHUB_CLIENT_ID }}" >> .env
            echo "GITHUB_CLIENT_SECRETS=${{ secrets.KITHUB_CLIENT_SECRETS }}" >> .env
            echo "GITHUB_REDIRECT_URI=${{ secrets.KITHUB_REDIRECT_URI }}" >> .env
            echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "VERSION=${VERSION}" >> .env
          
            docker-compose -f docker-compose.prod.yml --env-file .env pull
            docker-compose -f docker-compose.prod.yml --env-file .env up -d --no-build
          EOF

      - name: 정리
        if: always()
        run: rm -f private_key